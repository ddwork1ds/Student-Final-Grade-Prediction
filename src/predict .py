# predict.py
import pandas as pd
import numpy as np
import joblib
import os
import warnings
import sys
from pathlib import Path
base_dir=Path.cwd()
sys.path.append(str(base_dir))
from config import BEST_MODEL, MODEL_DIR,BEST_MODEL,ENCODER
warnings.filterwarnings("ignore")

def predict_single(input_data):
    """
    D·ª± ƒëo√°n nhanh cho m·ªôt h·ªçc sinh
    """
    print("üéØ B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n...")
    
    try:
        # T·∫£i model v·ªõi ƒë∆∞·ªùng d·∫´n ch√≠nh x√°c
        model = joblib.load(MODEL_DIR/"best_model.pkl")
        encoders = joblib.load(MODEL_DIR/"encoder.pkl")
        
        print("‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng model v√† encoder")
        
    except FileNotFoundError as e:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file - {e}")
        print("üìÅ H√£y ch·∫Øc ch·∫Øn c√°c file sau c√≥ trong th∆∞ m·ª•c:")
        print("  - best_model.pkl")
        print("  - encoder.pkl")
        return None
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫£i file: {e}")
        return None
    
    try:
        # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
        df_input = pd.DataFrame([input_data])
        print("üìä D·ªØ li·ªáu ƒë·∫ßu v√†o:")
        for key, value in input_data.items():
            print(f"  - {key}: {value}")
        
        # Th√™m c·ªôt G_Avg n·∫øu ch∆∞a c√≥
        if 'G_Avg' not in df_input.columns:
            if 'G1_10' in df_input.columns and 'G2_10' in df_input.columns:
                df_input['G_Avg'] = (df_input['G1_10'] + df_input['G2_10']) / 2
                print(f"‚úÖ ƒê√£ t√≠nh G_Avg: {df_input['G_Avg'].iloc[0]:.2f}")
            else:
                df_input['G_Avg'] = 5.0  # Gi√° tr·ªã m·∫∑c ƒë·ªãnh
                print("‚ö†Ô∏è S·ª≠ d·ª•ng G_Avg m·∫∑c ƒë·ªãnh: 5.0")
        
        # M√£ h√≥a bi·∫øn ph√¢n lo·∫°i
        categorical_cols = ['school', 'sex', 'Pstatus', 'paid', 'activities', 'higher', 'romantic']
        for col in categorical_cols:
            if col in df_input.columns and f"{col}_encoded" not in df_input.columns:
                if col in encoders:
                    le = encoders[col]["label_encoder"]
                    # Ki·ªÉm tra gi√° tr·ªã c√≥ trong encoder kh√¥ng
                    value = str(df_input[col].iloc[0]).strip()
                    if value in le.classes_:
                        df_input[f"{col}_encoded"] = le.transform([value])[0]
                        print(f"‚úÖ ƒê√£ m√£ h√≥a {col}: '{value}' -> {df_input[f'{col}_encoded'].iloc[0]}")
                    else:
                        print(f"‚ö†Ô∏è Gi√° tr·ªã '{value}' kh√¥ng c√≥ trong encoder, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh")
                        df_input[f"{col}_encoded"] = 0
                else:
                    print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y encoder cho {col}, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh 0")
                    df_input[f"{col}_encoded"] = 0
        
        # Ch·ªçn features
        features = ['sex_encoded', 'age', 'failures', 'higher_encoded', 'absences', 'G_Avg']
        print(f"üîß Features s·ª≠ d·ª•ng: {features}")
        
        # Ki·ªÉm tra xem c√≥ ƒë·ªß features kh√¥ng
        missing_features = [f for f in features if f not in df_input.columns]
        if missing_features:
            print(f"‚ùå Thi·∫øu features: {missing_features}")
            return None
        
        X = df_input[features]
        print("üìä Features cu·ªëi c√πng:")
        for i, feature in enumerate(features):
            print(f"  - {feature}: {X[feature].iloc[0]}")
        
        # D·ª± ƒëo√°n
        prediction = model.predict(X)[0]
        return prediction
        
    except Exception as e:
        print(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {e}")
        return None

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y d·ª± ƒëo√°n"""
    
    # Ki·ªÉm tra th∆∞ m·ª•c hi·ªán t·∫°i
    current_dir = os.getcwd()
    print(f"üìÇ Th∆∞ m·ª•c hi·ªán t·∫°i: {current_dir}")
    
    # Ki·ªÉm tra file t·ªìn t·∫°i
    required_files = ['best_model.pkl', 'encoder.pkl']
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ T√¨m th·∫•y: {file}")
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y: {file}")
    
    # V√≠ d·ª• d·ªØ li·ªáu ƒë·∫ßu v√†o
    sample_data = {
        'school': 'GP',
        'sex': 'F', 
        'age': 17,
        'Pstatus': 'T',
        'studytime': 2.0,
        'failures': 0,
        'paid': 'no',
        'activities': 'no', 
        'higher': 'yes',
        'romantic': 'no',
        'absences': 4,
        'G1_10': 6.0,
        'G2_10': 6.5
    }
    
    print("\nüéØ D·ª∞ ƒêO√ÅN ƒêI·ªÇM H·ªåC SINH")
    print("=" * 50)
    
    # Th·ª±c hi·ªán d·ª± ƒëo√°n
    predicted_grade = predict_single(sample_data)
    
    if predicted_grade is not None:
        print("\n" + "=" * 50)
        print("üìà K·∫æT QU·∫¢ D·ª∞ ƒêO√ÅN:")
        print(f"  ‚Ä¢ ƒêi·ªÉm G3 (thang 10): {predicted_grade:.2f}")
        print(f"  ‚Ä¢ ƒêi·ªÉm G3 (thang 20): {predicted_grade * 2:.2f}")
        
        # Ph√¢n lo·∫°i ƒëi·ªÉm
        if predicted_grade >= 8.5:
            category = "Xu·∫•t s·∫Øc"
        elif predicted_grade >= 7.0:
            category = "Gi·ªèi" 
        elif predicted_grade >= 5.5:
            category = "Kh√°"
        elif predicted_grade >= 4.0:
            category = "Trung b√¨nh"
        else:
            category = "Y·∫øu"
            
        print(f"  ‚Ä¢ Ph√¢n lo·∫°i: {category}")
        print("=" * 50)
    else:
        print("‚ùå Kh√¥ng th·ªÉ th·ª±c hi·ªán d·ª± ƒëo√°n")

if __name__ == "__main__":
    main()